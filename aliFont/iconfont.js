;(function(window) {

  var svgSprite = '<svg>' +
    '' +
    '<symbol id="icon-fangdajing" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M852.562443 687.761026c38.652322-62.999846 60.310597-148.7263 60.310597-228.055043 0-228.906433-185.561229-414.471756-414.467663-414.471756-228.903364 0-414.468686 185.565323-414.468686 414.471756 0 228.903364 185.565323 414.468686 414.468686 414.468686 74.789357 0 144.949276-19.808138 205.526957-54.466496 30.970362-17.71957 173.251879 155.227364 245.517763 110.305245C1035.535731 876.500645 834.751798 716.78813 852.562443 687.761026zM495.753991 773.940804c-176.040389 0-318.750671-142.707213-318.750671-318.750671 0-176.040389 142.710282-318.750671 318.750671-318.750671s318.750671 142.710282 318.750671 318.750671C814.504662 631.233592 671.794379 773.940804 495.753991 773.940804z"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '<symbol id="icon-tao" viewBox="0 0 1024 1024">' +
    '' +
    '<path d="M606.41944 963.39162"  ></path>' +
    '' +
    '<path d="M220.023112 296.646234c-11.269671 0.00921-21.74321-1.943258-31.42164-5.876847-9.698896-3.933589-18.146289-9.321296-25.358551-16.205077-7.190773-6.888897-12.82919-14.768355-16.899902-23.61893-4.070712-8.846482-6.112208-18.519796-6.121418-29.013801-0.017396-20.996197 7.782244-38.897915 23.416316-53.6632 15.615653-14.789844 34.376948-22.182208 56.262398-22.199605 21.890566-0.017396 40.636512 7.344269 56.298214 22.10853 15.636119 14.739702 23.464411 32.629141 23.481807 53.625338 0.008186 10.494005-2.016937 20.170388-6.072299 29.024034-4.056386 8.857738-9.6815 16.746406-16.863063 23.64656-7.179516 6.89606-15.613606 12.297071-25.310456 16.246009C241.742786 294.66716 231.271294 296.637024 220.023112 296.646234L220.023112 296.646234 220.023112 296.646234zM465.713814 223.623104c56.268538-16.445554 106.125039-27.972075 149.582807-34.56012 43.457768-6.592139 81.592296-9.597589 114.414843-8.947789 32.843012 0.62831 60.975746 4.208858 84.439134 10.741645 23.438828 6.537903 42.989093 14.405081 58.640562 23.586185 36.903491 21.612227 60.074214 51.777247 69.489654 90.493014 5.027503 30.149671 8.806573 64.928778 11.333116 104.299461 2.541893 33.44881 3.657296 73.641207 3.384074 120.56389-0.274246 46.891983-3.206018 99.546204-8.774851 157.959591-3.114944 29.532617-9.970072 53.965076-20.595061 73.321936-10.598382 19.383466-23.404036 35.308157-38.415938 47.774073-14.983249 12.491499-31.710212 21.671579-50.160423 27.589358-18.424628 5.938246-37.046754 9.872858-55.785537 11.869329-43.770899 4.631484-93.187379 0.075725-148.220786-13.664208l15.885805-66.935482 66.61621 14.697747c15.624862 1.320065 29.071106 0.801249 40.33873-1.50733 11.248182-2.307555 20.939915-5.918803 29.060873-10.833743 8.121981-4.940522 14.84408-10.511401 20.160155-16.754592 5.28947-6.238075 9.514701-12.968359 12.631692-20.177552 6.882757-16.405645 10.295484-35.122939 10.279111-56.119135l-0.267083-329.690838c0.578168-62.981427-26.513864-98.729605-81.226976-107.196441-54.714136-8.494465-133.036969 6.321986-234.92552 44.471864l46.908356 13.746072c-1.854231 7.209192-6.396687 16.236799-13.573133 27.073612-7.192819 10.821463-15.458063 22.801309-24.830525 35.938514l272.009114-0.220011 0.047072 58.072627-153.815201 0.124843 0.058328 71.829955 152.874783-0.12382 0.047072 58.06751-152.874783 0.12382 0.098237 121.04689c24.994254-8.532327 45.934169-19.697621 62.805418-33.502022l-13.177114-52.153824 72.201415-23.659863 60.173474 153.476487-89.086991 39.422871-15.990183-61.97347c-10.005888 7.870248-22.647813 16.418948-37.97387 25.619494-15.303544 9.174963-33.9226 17.558911-55.779398 25.12626-21.877263 7.55814-47.049572 13.649881-75.514881 18.268062-28.437679 4.620227-60.480466 6.290263-96.130408 5.013177-19.374256 0.670266-35.797297-1.303692-49.247634-5.888104-13.450337-4.581342-24.699542-11.128455-33.778314-19.633153-9.078773-8.531304-16.124236-18.199501-21.13639-29.03222-5.01727-10.806113-8.772804-22.119787-11.276834-33.942043-5.653767-26.889417-5.366218-57.729819 0.870834-92.511997l3.744277-2.951215 108.810195-0.088004c-0.6191 12.453636-2.006703 26.895557-4.197602 43.319621-2.163269 16.396435-0.11768 30.15888 6.130627 41.327244 5.63944 9.157567 14.086833 14.910595 25.332968 17.199731 11.271718 2.289136 21.264303 3.416819 30.018687 3.409656 1.258667 0.653893 3.145643 0.99056 5.638417 0.988514l-0.112564-138.777717-156.652829 0.12689-0.047072-58.06751 156.652829-0.12689-0.058328-71.829955-40.34487 0.032746c-8.746198 9.844206-17.177218 19.018146-25.297153 27.563776l-21.553898 22.657023c-6.862291 7.233752-13.752212 14.108323-20.615527 20.691251l-46.932915-43.276642c8.118911-9.194406 16.411785-19.530822 24.839735-31.024597 8.43409-11.473309 16.381086-23.308869 23.89113-35.450397 7.487531-12.126178 14.515598-24.125467 21.063735-35.935444 6.568602-11.803837 12.651135-22.644743 18.281365-32.493042-8.752338 3.294023-17.505699 6.904247-26.25599 10.853186-8.752338 3.954055-17.502629 8.215102-26.253944 12.817933-8.746198 11.155061-18.119683 22.817682-28.128641 34.968419-9.975189 12.129248-20.608364 23.792892-31.868825 34.95 0.001023 0.655939-3.89368-1.301645-11.712763-5.892197-7.81192-4.585435-16.741289-9.828856-26.75741-15.724123-11.255345-7.197936-24.079418-15.07023-38.479383-23.596418 20.010753-18.372439 37.81935-40.371476 53.4217-65.973574 15.603373-25.601074 28.718065-50.544163 39.33896-74.836429 12.478196-27.558659 23.391756-56.4425 32.746822-86.636173l112.588241 32.387641-7.484462 15.751752-8.428973 18.705014C475.084229 207.215412 470.710618 215.07952 465.713814 223.623104L465.713814 223.623104zM153.442718 327.222623c17.521049 13.744026 31.604812 24.908296 42.231847 33.411971 10.642384 8.529257 19.869536 16.235776 27.710109 23.124673 7.813966 6.862291 15.628956 14.258749 23.450085 22.10853 7.820106 7.876388 17.692964 18.029632 29.580712 30.500665 18.155499 18.99461 27.076682 41.961694 26.780947 68.859297-0.294712 26.89351-5.732561 58.071603-16.34527 93.511767l-8.420787 28.544103c-2.483564 6.559393-5.134951 13.282514-7.939833 20.178575-2.821255 6.898107-6.080485 14.439874-9.825786 22.64372-3.765767 8.202822-8.738012 19.207457-14.988366 32.976042l-23.422456 52.1835c-9.340739 20.354584-20.906146 46.601364-34.638915 78.753645L65.63179 754.403842c25.616424-24.305569 49.346895-48.264237 71.216995-71.889307 18.751063-19.702738 37.016055-40.397059 54.825676-62.053288 17.808598-21.665439 30.125111-40.052205 37.008892-55.148018 7.485485-15.10093 9.962909-28.718065 7.463995-40.831964-2.50403-12.140505-6.575766-22.148439-12.214183-30.026874-6.901177-9.162684-15.954367-17.35425-27.230178-24.573675l-93.838202-60.944024L153.442718 327.222623 153.442718 327.222623zM153.442718 327.222623"  ></path>' +
    '' +
    '</symbol>' +
    '' +
    '</svg>'
  var script = function() {
    var scripts = document.getElementsByTagName('script')
    return scripts[scripts.length - 1]
  }()
  var shouldInjectCss = script.getAttribute("data-injectcss")

  /**
   * document ready
   */
  var ready = function(fn) {
    if (document.addEventListener) {
      if (~["complete", "loaded", "interactive"].indexOf(document.readyState)) {
        setTimeout(fn, 0)
      } else {
        var loadFn = function() {
          document.removeEventListener("DOMContentLoaded", loadFn, false)
          fn()
        }
        document.addEventListener("DOMContentLoaded", loadFn, false)
      }
    } else if (document.attachEvent) {
      IEContentLoaded(window, fn)
    }

    function IEContentLoaded(w, fn) {
      var d = w.document,
        done = false,
        // only fire once
        init = function() {
          if (!done) {
            done = true
            fn()
          }
        }
        // polling for no errors
      var polling = function() {
        try {
          // throws errors until after ondocumentready
          d.documentElement.doScroll('left')
        } catch (e) {
          setTimeout(polling, 50)
          return
        }
        // no errors, fire

        init()
      };

      polling()
        // trying to always fire before onload
      d.onreadystatechange = function() {
        if (d.readyState == 'complete') {
          d.onreadystatechange = null
          init()
        }
      }
    }
  }

  /**
   * Insert el before target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var before = function(el, target) {
    target.parentNode.insertBefore(el, target)
  }

  /**
   * Prepend el to target
   *
   * @param {Element} el
   * @param {Element} target
   */

  var prepend = function(el, target) {
    if (target.firstChild) {
      before(el, target.firstChild)
    } else {
      target.appendChild(el)
    }
  }

  function appendSvg() {
    var div, svg

    div = document.createElement('div')
    div.innerHTML = svgSprite
    svgSprite = null
    svg = div.getElementsByTagName('svg')[0]
    if (svg) {
      svg.setAttribute('aria-hidden', 'true')
      svg.style.position = 'absolute'
      svg.style.width = 0
      svg.style.height = 0
      svg.style.overflow = 'hidden'
      prepend(svg, document.body)
    }
  }

  if (shouldInjectCss && !window.__iconfont__svg__cssinject__) {
    window.__iconfont__svg__cssinject__ = true
    try {
      document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
    } catch (e) {
      console && console.log(e)
    }
  }

  ready(appendSvg)


})(window)